<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1321 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1321.xml">
<!ENTITY RFC2045 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3526 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3526.xml">
<!ENTITY RFC4462 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4462.xml">
<!ENTITY RFC5656 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5656.xml">
<!ENTITY RFC6194 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6194.xml">
<!ENTITY RFC6234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6234.xml">
<!ENTITY RFC7546 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7546.xml">
<!ENTITY RFC7748 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7748.xml">
<!ENTITY RFC8268 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8268.xml">
<!ENTITY SSHCURVES PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-curdle-ssh-curves-08.xml'>
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc autobreaks="yes"?>
<?rfc docmapping="yes"?>

<rfc category="std" docName="draft-ietf-curdle-gss-keyex-sha2-09"
     ipr="trust200902" updates="4462">
  <front>
    <title abbrev="GSS Keyex SHA2">GSS-API Key Exchange with SHA2</title>

    <author fullname="Simo Sorce" initials="S." surname="Sorce">
      <organization>Red Hat, Inc.</organization>

      <address>
        <postal>
          <street>140 Broadway</street>

          <street>24th Floor</street>

          <city>New York</city>

          <region>NY</region>

          <code>10025</code>

          <country>USA</country>
        </postal>

        <email>simo@redhat.com</email>
      </address>
    </author>

    <author fullname="Hubert Kario" initials="H." surname="Kario">
      <organization>Red Hat, Inc.</organization>

      <address>
        <postal>
          <street>Purkynova 115</street>

          <city>Brno</city>

          <code>612 00</code>

          <country>Czech Republic</country>
        </postal>

        <email>hkario@redhat.com</email>
      </address>
    </author>

    <date month="Jun" year="2019" />

    <area>Security</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <abstract>
      <t>This document specifies additions and amendments to RFC4462.
      It defines a new key exchange method that uses SHA-2 for integrity and
      deprecates weak DH groups. The purpose of this specification is to
      modernize the cryptographic primitives used by GSS Key Exchanges.</t>
    </abstract>
  </front>


  <middle>
    <section title="Introduction">
      <t><xref target="RFC4462">SSH GSS-API Methods</xref> allows the use of
      GSSAPI for authentication and key exchange in SSH. It defines three
      exchange methods all based on DH groups and SHA-1. This document
      updates RFC4462 with new methods intended to support environments that
      desire to use the SHA-2 cryptographic hash functions.</t>
    </section>

    <section title="Rationale">
      <t>Due to security concerns with SHA-1 <xref target="RFC6194"/> and with
      MODP groups with less than 2048 bits <xref target="NIST-SP-800-131Ar1"/>
      we propose the use of the SHA-2 <xref target="RFC6234"/> based hashes
      with DH group14, group15,
      group16, group17 and group18 <xref target="RFC3526"/>. Additionally we
      add support for key exchange based on Elliptic Curve Diffie Hellman with
      the NIST P-256, P-384 and P-521 as well as the X25519 and X448 curves.
      Following the practice of <xref target="RFC8268"/> only SHA-256 and
      SHA-512 hashes are used for DH groups. For NIST curves the same
      curve-to-hashing algorithm pairing used in <xref target="RFC5656"/> is
      adopted for consistency.</t>
    </section>

    <section title="Document Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
      "MAY", and "OPTIONAL" in this document are to be interpreted as
      described in BCP 14 <xref target="RFC2119">>RFC2119</xref>
      <xref target="RFC8174">RFC8174</xref> when, and only when, they
      appear in all capitals, as shown here.</t>
    </section>

    <section title="New Diffie-Hellman Key Exchange methods">
      <t>This document adopts the same naming convention defined in <xref
        target="RFC4462"/> to define families of methods that cover any
        GSS-API mechanism used with a specific Diffie-Hellman group and
        SHA-2 Hash combination.
      </t>
      <texttable>
        <preamble>The following new key exchange algorithms are defined:
        </preamble>
          <ttcol align="left">Key Exchange Method Name</ttcol>
          <ttcol align="left">Implementation Recommendations</ttcol>
          <c>gss-group14-sha256-*</c><c>SHOULD/RECOMMENDED</c>
          <c>gss-group15-sha512-*</c><c>MAY/OPTIONAL</c>
          <c>gss-group16-sha512-*</c><c>SHOULD/RECOMMENDED</c>
          <c>gss-group17-sha512-*</c><c>MAY/OPTIONAL</c>
          <c>gss-group18-sha512-*</c><c>MAY/OPTIONAL</c>
      </texttable>
      <t>Each key exchange method is implicitly registered by this document.
        The IESG is considered to be the owner of all these key exchange
        methods; this does NOT imply that the IESG is considered to be the
        owner of the underlying GSS-API mechanism.
      </t>
      <t>
        Each method in any family of methods specifies GSS-API-authenticated
        Diffie-Hellman key exchanges as described in Section 2.1 of <xref
        target="RFC4462"/>. The method name for each method is the
        concatenation of the family name prefix with the Base64 encoding of
        the MD5 hash <xref target="RFC1321"/> of the ASN.1 DER encoding
        <xref target="ISO-IEC-8825-1"/> of the underlying GSS-API
        mechanism's OID. Base64 encoding is described in Section 6.8 of
        <xref target="RFC2045"/>.</t>
      <texttable>
        <preamble>Family method refences</preamble>
          <ttcol align="left">Family Name prefix</ttcol>
          <ttcol align="left">Hash Function</ttcol>
          <ttcol align="left">Group </ttcol>
          <ttcol align="left">Reference</ttcol>
          <c>gss-group14-sha256-</c><c>SHA-256</c><c>2048-bit MODP</c>
            <c>Section 3 of <xref target="RFC3526"/></c>
          <c>gss-group15-sha512-</c><c>SHA-512</c><c>3072-bit MODP</c>
            <c>Section 4 of <xref target="RFC3526"/></c>
          <c>gss-group16-sha512-</c><c>SHA-512</c><c>4096-bit MODP</c>
            <c>Section 5 of <xref target="RFC3526"/></c>
          <c>gss-group17-sha512-</c><c>SHA-512</c><c>6144-bit MODP</c>
            <c>Section 6 of <xref target="RFC3526"/></c>
          <c>gss-group18-sha512-</c><c>SHA-512</c><c>8192-bit MODP</c>
            <c>Section 7 of <xref target="RFC3526"/></c>
      </texttable>
    </section>

    <section title="New Elliptic Curve Diffie-Hellman Key Exchange methods">
      <t>In <xref target="RFC5656"/> new SSH key exchange algorithms based on
      Elliptic Curve Cryptography are introduced. We reuse much of section 4
      of <xref target="RFC5656"/>
      to define GSS-API-authenticated ECDH Key Exchanges.</t>
      <t>Additionally we utilize also the curves defined in <xref
      target="I-D.ietf-curdle-ssh-curves"/> to complement the 3 classic
      NIST defined curves required by <xref target="RFC5656"/>.</t>

      <section title="Generic GSS-API Key Exchange with ECDH" anchor="gen_gss_ecdh">
        <t>This section reuses much of the scheme defined in Section 2.1 of
        <xref target="RFC4462"/> and combines it with the scheme defined in
        Section 4 of <xref target="RFC5656"/>; in particular, all checks and
        verification steps prescribed in Section 4 of
        <xref target="RFC5656"/> apply here as well.</t>

        <t>Key-agreement schemes ECDHE-Curve25519 and ECDHE-Curve448 perform
        the Diffie-Helman protocol using the functions X25519 and X448,
        respectively. Implementations SHOULD compute these functions using
        the algorithms described in <xref target="RFC7748"/>. When they do
        so, implementations MUST check whether the computed Diffie-Hellman
        shared secret is the all-zero value and abort if so, as described in
        Section 6 of <xref target="RFC7748"/>. Alternative implementations
        of these functions SHOULD abort when either input forces the shared
        secret to one of a small set of values, as discussed in Section 7 of
        <xref target="RFC7748"/>.</t>

        <t>This section defers to <xref target="RFC7546"/> as the source of
        information on GSS-API context establishment operations, Section 3
        being the most relevant. All Security Considerations described in
        <xref target="RFC7546"/> apply here too.</t>

        <t>The parties generate each an ephemeral key pair, according to
        Section 3.2.1 of <xref target="SEC1v2"/>. Keys are verified upon
        receipt by the parties according to Section 3.2.3.1 of
        <xref target="SEC1v2"/>.</t>

        <t>For NIST Curves the keys use the uncompressed point representation
        and must be converted using the algorithm in Section 2.3.4 of
        <xref target="SEC1v2"/>. If the conversion fails or the point is
        trasmitted using the compressed representation, the key exchange MUST
        fail.</t>

        <t>A GSS Context is established according to Section 4 of
        <xref target="RFC5656"/>; The client initiates the establishment
        using GSS_Init_sec_context() and the server responds to it using
        GSS_Accept_sec_context(). For the negotiation, the client MUST set
        mutual_req_flag and integ_req_flag to "true". In addition,
        deleg_req_flag MAY be set to "true" to request access delegation, if
        requested by the user. Since the key exchange process authenticates
        only the host, the setting of anon_req_flag is immaterial to this
        process. If the client does not support the "gssapi-keyex" user
        authentication method described in Section 4 of
        <xref target="RFC4462"/>, or does not intend to use that method in
        conjunction with the GSS-API context established during key exchange,
        then anon_req_flag SHOULD be set to "true". Otherwise, this flag MAY
        be set to true if the client wishes to hide its identity.
        This key exchange process will exchange only a single message token
        once the context has been established, therefore the
        replay_det_req_flag and sequence_req_flag SHOULD be set to "false".
        </t>

        <t>The client MUST include its public key with the first message it
        sends to the server during this process; if the server receives
        more than one key or none at all, the key exchange MUST fail.</t>

        <t>During GSS Context estalishment multiple tokens may be exchanged by
        the client and the server. When the GSS Context is established
        (major_status is GSS_S_COMPLETE) the parties check that
        mutual_state and integ_avail are both "true". If not the key
        exchange MUST fail.</t>

        <t>Once a party receives the peer's public key it proceeds to compute
        a shared secret K. For NIST Curves the computation is done according
        to Section 3.3.1 of <xref target="SEC1v2"/> and the resulting value
        z is converted to the octet string K using the conversion defined
        in Section 2.3.5 of <xref target="SEC1v2"/>. For curve25519 and
        curve448 the algorithms in Section 6 of <xref target="RFC7748"/> are
        used instead.</t>

        <t>To verify the integrity of the handshake, peers use the Hash
        Function defined by the selected Key Exchange method to calculate H:
        </t>

        <t>H = hash(V_C || V_S || I_C || I_S || K_S || Q_C || Q_S || K).</t>

        <t>The GSS_GetMIC() call is used by the server with H as the payload
        and generates a MIC. The GSS_VerifyMIC() call is used by the client to
        verify the MIC.</t>

        <t>If any GSS_Init_sec_context() or GSS_Accept_sec_context() returns
        a major_status other than GSS_S_COMPLETE or GSS_S_CONTINUE_NEEDED, or
        any other GSS-API call returns a major_status other than
        GSS_S_COMPLETE, the key exchange MUST fail. The same recommendations
        expressed in Section 2.1 of <xref target="RFC4462"/> are followed with
        regards to error reporting.</t>

        <t>The following is an overview of the key exchange process:
          <figure>
            <artwork>
      Client                                                Server
      ------                                                ------
      Generate ephemeral key pair.
      Calls GSS_Init_sec_context().
      SSH_MSG_KEXGSS_INIT  ---------------&gt;

                                      Verify received key is valid.
  (Optional)                  &lt;------------- SSH_MSG_KEXGSS_HOSTKEY

  (Loop)
  |                                 Calls GSS_Accept_sec_context().
  |                           &lt;------------ SSH_MSG_KEXGSS_CONTINUE
  |   Calls GSS_Init_sec_context().
  |   SSH_MSG_KEXGSS_CONTINUE ------------&gt;

                                    Calls GSS_Accept_sec_context().
                                       Generate ephemeral key pair.
                                             Compute shared secret.
                                                   Computes hash H.
                                       Calls GSS_GetMIC( H ) = MIC.
                              &lt;------------ SSH_MSG_KEXGSS_COMPLETE

      Verify received key is valid.
      Compute shared secret.
      Compute hash = H
      Calls GSS_VerifyMIC( MIC, H )
            </artwork>
          </figure>
        </t>

    <t>This is implemented with the following messages:</t>
        <figure>
          <preamble>The client sends:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_INIT
    string    output_token (from GSS_Init_sec_context())
    string    Q_C, client's ephemeral public key octet string
          </artwork>
        </figure>
        <figure>
          <preamble>The server may responds with:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_HOSTKEY
    string    server public host key and certificates (K_S)
          </artwork>
        </figure>
        <figure>
          <preamble>The server sends:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_CONTINUE
    string    output_token (from GSS_Accept_sec_context())
          </artwork>
        </figure>
        <t>Each time the client receives the message described above, it
        makes another call to GSS_Init_sec_context().</t>
        <figure>
          <preamble>The client sends:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_CONTINUE
    string    output_token (from GSS_Init_sec_context())
          </artwork>
        </figure>
        <figure>
          <preamble>As the final message the server sends either:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_COMPLETE
    string    Q_S, server's ephemeral public key octet string
    string    mic_token (MIC of H)
    boolean   TRUE
    string    output_token (from GSS_Accept_sec_context())
          </artwork>
        </figure>
        <figure>
          <preamble>Or the following if no output_token is available:</preamble>
          <artwork>
    byte      SSH_MSG_KEXGSS_COMPLETE
    string    Q_S, server's ephemeral public key octet string
    string    mic_token (MIC of H)
    boolean   FALSE
          </artwork>
        </figure>
        <figure>
          <preamble>The hash H is computed as the HASH hash of the
          concatenation of the following:</preamble>
          <artwork>
    string    V_C, the client's version string (CR, NL excluded)
    string    V_S, server's version string (CR, NL excluded)
    string    I_C, payload of the client's SSH_MSG_KEXINIT
    string    I_S, payload of the server's SSH_MSG_KEXINIT
    string    K_S, server's public host key
    string    Q_C, client's ephemeral public key octet string
    string    Q_S, server's ephemeral public key octet string
    mpint     K,   shared secret
          </artwork>
        </figure>

        <t>This value is called the exchange hash, and it is used to
        authenticate the key exchange. The exchange hash SHOULD be kept
        secret. If no SSH_MSG_KEXGSS_HOSTKEY message has been sent by the
        server or received by the client, then the empty string is used in
        place of K_S when computing the exchange hash.</t>

        <t>Since this key exchange method does not require the host key to
        be used for any encryption operations, the SSH_MSG_KEXGSS_HOSTKEY
        message is OPTIONAL. If the "null" host key algorithm described in
        Section 5 of <xref target="RFC4462"/> is used, this message MUST
        NOT be sent.</t>

        <t>If the client receives a SSH_MSG_KEXGSS_CONTINUE message after
        a call to GSS_Init_sec_context() has returned a major_status code
        of GSS_S_COMPLETE, a protocol error has occurred and the key
        exchange MUST fail.</t>

        <t>If the client receives a SSH_MSG_KEXGSS_COMPLETE message and a
        call to GSS_Init_sec_context() does not result in a major_status
        code of GSS_S_COMPLETE, a protocol error has occurred and the key
        exchange MUST fail.</t>

      </section>

      <section title="ECDH Key Exchange Methods">
      <texttable>
        <preamble>The following new key exchange methods are defined:
        </preamble>
          <ttcol align="left">Key Exchange Method Name</ttcol>
          <ttcol align="left">Implementation Recommendations</ttcol>
          <c>gss-nistp256-sha256-*</c><c>SHOULD/RECOMMENDED</c>
          <c>gss-nistp384-sha384-*</c><c>MAY/OPTIONAL</c>
          <c>gss-nistp521-sha512-*</c><c>MAY/OPTIONAL</c>
          <c>gss-curve25519-sha256-*</c><c>SHOULD/RECOMMENDED</c>
          <c>gss-curve448-sha512-*</c><c>MAY/OPTIONAL</c>
      </texttable>
      <t>Each key exchange method is implicitly registered by this document.
        The IESG is considered to be the owner of all these key exchange
        methods; this does NOT imply that the IESG is considered to be the
        owner of the underlying GSS-API mechanism.</t>
      <t>
        Each method in any family of methods specifies GSS-API-authenticated
        Elliptic Curve Diffie-Hellman key exchanges as described in <xref
        target="gen_gss_ecdh"/>. The method name for each method is the
        concatenation of the family method name with the Base64 encoding of
        the MD5 hash <xref target="RFC1321"/> of the ASN.1 DER encoding
        <xref target="ISO-IEC-8825-1"/> of the underlying GSS-API
        mechanism's OID. Base64 encoding is described in Section 6.8 of
        <xref target="RFC2045"/>.</t>
      <texttable>
        <preamble>Family method refences</preamble>
          <ttcol align="left">Family Name prefix</ttcol>
          <ttcol align="left">Hash Function</ttcol>
          <ttcol align="left">Parameters / Function Name</ttcol>
          <ttcol align="left">Definition</ttcol>
          <c>gss-nistp256-sha256-</c><c>SHA-256</c><c>secp256r1</c>
            <c>Section 2.4.2 of <xref target="SEC2v2"/></c>
          <c>gss-nistp384-sha384-</c><c>SHA-384</c><c>secp384r1</c>
            <c>Section 2.5.1 of <xref target="SEC2v2"/></c>
          <c>gss-nistp521-sha512-</c><c>SHA-512</c><c>secp521r1</c>
            <c>Section 2.6.1 of <xref target="SEC2v2"/></c>
          <c>gss-curve25519-sha256-</c><c>SHA-256</c><c>X22519</c>
            <c>Section 5 of <xref target="RFC7748"/></c>
          <c>gss-curve448-sha512-</c><c>SHA-512</c><c>X448</c>
            <c>Section 5 of <xref target="RFC7748"/></c>
      </texttable>
      </section>
    </section>

    <section title="Deprecated Algorithms">
      <t>Because they have small key lengths and are no longer strong in
      the face of brute-force attacks, the algorithms in the following
      table are considered deprecated and SHOULD NOT be used.</t>
      <texttable>
        <preamble>Deprecated Algorithms</preamble>
          <ttcol align="left">Key Exchange Method Name</ttcol>
          <ttcol align="left">Implementation Recommendations</ttcol>
          <c>gss-group1-sha1-*</c><c>SHOULD NOT</c>
          <c>gss-group14-sha1-*</c><c>SHOULD NOT/c>
          <c>gss-gex-sha1-*</c><c>SHOULD NOT</c>
      </texttable>
    </section>
           
    <section title="IANA Considerations">
      <t>This document augments the SSH Key Exchange Method Names in <xref
      target="RFC4462"/>.</t>
      <texttable>
        <preamble>IANA is requested to update the <xref
        target="IANA-KEX-NAMES">SSH Protocol Parameters</xref> registry
        with the following entries:</preamble>
          <ttcol align="left">Key Exchange Method Name</ttcol>
          <ttcol align="left">Reference</ttcol>
          <c>gss-group1-sha1-*</c><c>This draft</c>
          <c>gss-group14-sha1-*</c><c>This draft</c>
          <c>gss-gex-sha1-*</c><c>This draft</c>
          <c>gss-group14-sha256-*</c><c>This draft</c>
          <c>gss-group15-sha512-*</c><c>This draft</c>
          <c>gss-group16-sha512-*</c><c>This draft</c>
          <c>gss-group17-sha512-*</c><c>This draft</c>
          <c>gss-group18-sha512-*</c><c>This draft</c>
          <c>gss-nistp256-sha256-*</c><c>This draft</c>
          <c>gss-nistp384-sha384-*</c><c>This draft</c>
          <c>gss-nistp521-sha512-*</c><c>This draft</c>
          <c>gss-curve25519-sha256-*</c><c>This draft</c>
          <c>gss-curve448-sha512-*</c><c>This draft</c>
      </texttable>
    </section>

    <section title="Security Considerations">
      <section title="New Finite Field DH mechanisms">
        <t>Except for the use of a different secure hash function and larger
        DH groups, no significant changes has been made to the protocol
        described by <xref target="RFC4462"/>; therefore all the original
        Security Considerations apply.</t>
      </section>
      <section title="New Elliptic Curve DH mechanisms">
        <t>Although a new cryptographic primitive is used with these methods
        the actual key exchange closely follows the key exchange defined in
        <xref target="RFC5656"/>; therefore all the original Security
        Considerations as well as those expressed in <xref target="RFC5656"/>
        apply.</t>
      </section>
      <section title="GSSAPI Delegation">
        <t>Some GSSAPI mechanisms can act on a request to delegate credentials
        to the target host when the deleg_req_flag is set. In this case, extra
        care must be taken to ensure that the acceptor being authenticated
        matches the target the user intended. Some mechanisms implementations
        (like commonly used krb5 libraries) may use insecure DNS resolution to
        canonicalize the target name; in these cases spoofing a DNS response
        that points to an attacker-controlled machine may results in the user
        silently delegating credentials to the attacker, who can then
        impersonate the user at will.</t>
      </section>
    </section>

  </middle>

  <back>
<?rfc rfcedstyle="no"?>
    <references title="Normative References">

      &RFC1321;
      &RFC2045;

      <!--DH GROUPS-->

      &RFC3526;

      <!--SSH GSS-API Methods-->

      &RFC4462;

      <!-- SSH ECC Algorithms -->

      &RFC5656;

      &RFC7546;

      &SSHCURVES;

      &RFC7748;

      <!--Key words for use in RFCs to Indicate Requirement Levels-->

      &RFC2119;

      <!--ECC specifications-->

      <reference
          anchor="SEC1v2">
          <front>
              <title>SEC 1: Elliptic Curve Cryptography</title>
              <author>
                  <organization>Certicom Research</organization>
              </author>
              <date year="2009"/>
          </front>
          <seriesInfo
              name="Standards for Efficient Cryptography"
              value="SEC 1"/>
          <seriesInfo
              name="Version"
              value="2.0"/>
      </reference>

      <reference
          anchor="SEC2v2">
          <front>
              <title>SEC 2: Recommended Elliptic Curve Domain Parameters</title>
              <author>
                  <organization>Certicom Research</organization>
              </author>
              <date year="2010"/>
          </front>
          <seriesInfo
              name="Standards for Efficient Cryptography"
              value="SEC 2"/>
          <seriesInfo
              name="Version"
              value="2.0"/>
      </reference>
    </references>

    <references title="Informative References">

      &RFC6194;

      &RFC8268;

      <!--SHA-2-->

      &RFC6234;

      <reference
          anchor="ISO-IEC-8825-1"
          target="http://standards.iso.org/ittf/PubliclyAvailableStandards/c068345_ISO_IEC_8825-1_2015.zip">
        <front>
          <title>ASN.1 encoding rules: Specification of Basic Encoding Rules
          (BER), Canonical Encoding Rules (CER) and Distinguished Encoding
          Rules (DER)</title>
          <author>
            <organization>International Organization for Standardization /
            International Electrotechnical Commission</organization>
          </author>
          <date day="15" month="November" year="2015"/>
        </front>
        <seriesInfo name="ISO/IEC" value="8825-1"/>
      </reference>

      <reference
          anchor="NIST-SP-800-131Ar1"
          target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">
        <front>
          <title>Transitions: Recommendation for Transitioning of
          the Use of Cryptographic Algorithms and Key Lengths</title>
          <author>
            <organization
                abbrev="NIST">National Institute of Standards and Technology
            </organization>
          </author>
          <date month="November" year="2015"/>
        </front>
        <seriesInfo
            name="NIST Special Publication"
            value="800-131A Revision 1"/>
       </reference>

      <reference
          anchor="IANA-KEX-NAMES"
          target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-16">
        <front>
          <title> Secure Shell (SSH) Protocol Parameters: Key Exchange Method Names</title>
          <author>
            <organization
                abbrev="IANA">Internet Assigned Numbers Authority
            </organization>
          </author>
          <date day="2" month="June" year="2005"/>
        </front>
      </reference>
    </references>

  </back>
</rfc>
